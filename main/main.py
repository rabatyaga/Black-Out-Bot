from datetime import datetime
import telebot
from telebot import types
from resources.Data import Dicts
from resources.electricity import *
from resources.TOKEN import token, chatId
from clients.telegram_client import TelegramClient
from clients.sqlclient import SQLiteClient, UserActioner
# from logger_main import *

TOKEN = token
ADMIN_CHAT_ID = chatId


class MyBot(telebot.TeleBot):
    def __init__(self, telegram_client: TelegramClient, user_actioner: UserActioner, *args, **kwargs):
        super(self.__class__, self).__init__(*args, **kwargs)
        self.telegram_client = telegram_client
        self.user_actioner = user_actioner

    def setup_resources(self):
        self.user_actioner.setup()

    def shutdown_resources(self):
        self.user_actioner.shutdown()

    def shutdown(self):
        self.shutdown_resources()


user_actioner = UserActioner(SQLiteClient(r"../resources/users.db"))
telegram_client = TelegramClient(token=TOKEN, base_url="https://api.telegram.org")
bot = MyBot(token=TOKEN, telegram_client=telegram_client, user_actioner=user_actioner)



@bot.message_handler(commands=['start'])
def start_message(message):
    img = open(Dicts.PICTURE_1, 'rb')
    msg = bot.send_photo(message.chat.id, img, caption="–ü—Ä–∏–≤—ñ—Ç!\n–¶–µ–π –±–æ—Ç –ø–æ—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏ <b>–ø–ª–∞–Ω–æ–≤–∏—Ö</b> –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ "
                                                 "–õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ <b>–∞–≤–∞—Ä—ñ–π–Ω—ñ</b> –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥–∞—î—Ç—å—Å—è. "
                                    "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>/putin_huilo</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, reply_to_start)



def reply_to_start(message):
    if message.text != "/putin_huilo":
        bot.reply_to(message, "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ —ñ–∑ –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—ñ –ø–æ–ª—ñ—Ç–∏—á–Ω—ñ –ø–æ–≥–ª—è–¥–∏, —Ç–æ–º—É —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, "
                          "—Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º, —â–æ –≤–∫–∞–∑–∞–Ω—ñ –Ω–∏–∂—á–µ üëáüèª", parse_mode='HTML')
        start_message(message)
    else:
        choose_group(message)


# @bot.message_handler(commands=['putin_huilo'])
def choose_group(message):
    markup_inline = types.InlineKeyboardMarkup()
    group_1 = types.InlineKeyboardButton(text='I –≥—Ä—É–ø–∞', callback_data=1)
    group_2 = types.InlineKeyboardButton(text='II –≥—Ä—É–ø–∞', callback_data=2)
    group_3 = types.InlineKeyboardButton(text='III –≥—Ä—É–ø–∞', callback_data=3)
    markup_inline.add(group_1, group_2, group_3)
    bot.send_message(message.chat.id, '<b>–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –≥—Ä—É–ø–∏:</b>', reply_markup=markup_inline, parse_mode='HTML')
    markup_inline_2 = types.InlineKeyboardMarkup()
    url = types.InlineKeyboardButton(text='–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≥—Ä—É–ø—É', url='https://poweroff.loe.lviv.ua/gav_city3')
    markup_inline_2.add(url)
    bot.send_message(message.chat.id, '<b>–ù–µ –∑–Ω–∞—î—Ç–µ –≤ —è–∫—ñ–π –≤–∏ –≥—Ä—É–ø—ñ?</b>', reply_markup=markup_inline_2,
                     parse_mode='HTML')



@bot.message_handler(content_types=["text"])
def reply(message):
    bot.reply_to(message, "–°–ø–µ—Ä—à—É <b>–æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É! ‚òùüèª</b>\n–î–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ—à—ñ, —â–æ –∑'—è–≤–ª—è—é—Ç—å—Å—è —É —á–∞—Ç—ñ —Ç–∞ "
                          "—É –Ω–∏–∂–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –µ–∫—Ä–∞–Ω—É.", parse_mode='HTML')



@bot.callback_query_handler(func=lambda callback: callback.data)
def to_json(callback):

    tg_name = callback.from_user.username
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    chat_id = callback.message.chat.id
    group_id = callback.data
    bot.delete_message(callback.message.chat.id, callback.message.id)

    user = bot.user_actioner.get_user(user_id=str(user_id))

    if not user:
        bot.user_actioner.create_user(user_id=str(user_id), username=user_name, chat_id=chat_id, tg_name=tg_name)
        bot.user_actioner.set_group(user_id=str(user_id), group_id=group_id)
    else:
        bot.user_actioner.set_group(user_id=str(user_id), group_id=group_id)


    bot.send_message(callback.message.chat.id, text=f'–í—ñ—Ç–∞—é, {user_name}. –í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.\n'
                                                    f'–í–∞—à–∞ –≥—Ä—É–ø–∞: ‚Ññ{group_id}')
    choose_option(callback.message)


def choose_option(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    btn1 = types.KeyboardButton(text='1 üí°')
    btn2 = types.KeyboardButton(text='2 üïØ')
    btn3 = types.KeyboardButton(text='3 üìÖ')
    btn4 = types.KeyboardButton(text='4 ‚è∞')
    btn5 = types.KeyboardButton(text='5 üîÅ')
    kb.add(btn1, btn2, btn3, btn4, btn5)
    msg = bot.send_message(message.chat.id, text='<b>–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:</b>', reply_markup=kb, parse_mode='HTML')

    bot.send_message(message.chat.id, text='1. –î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É —Ü—é –º–∏—Ç—å.\n'
                                           '2. –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å.\n'
                                           '3. –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n'
                                           '4. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–æ–¥–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.\n'
                                           '5. –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É.')
    bot.register_next_step_handler(msg, option)

def on_off(message):
    if message.text == "–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
        bot.send_message(message.chat.id, text=f'–í—ñ—Ç–∞—é, {user_actioner.get_user(user_id=str(message.from_user.id))[1]}. '
                                               f'–í–∏ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!\n'
                                               '–ö–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É –∑–∞ –≥–æ–¥–∏–Ω—É –ø–µ—Ä–µ–¥ –º–æ–∂–ª–∏–≤–∏–º –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º '
                                               '–í–∞–º –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏–º–µ –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')

        bot.user_actioner.set_notify(user_id=str(message.from_user.id), notifications=1)
        choose_option(message)
    elif message.text == "–í—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
        bot.send_message(message.chat.id,
                         text="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –≤–∏–º–∫–Ω–µ–Ω–æ !")
        bot.user_actioner.set_notify(user_id=str(message.from_user.id), notifications=0)
        choose_option(message)
    else:
        bot.reply_to(message, text="–î–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ—à—ñ, —â–æ –∑'—è–≤–ª—è—é—Ç—å—Å—è —É "
                          "–Ω–∏–∂–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –µ–∫—Ä–∞–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–±–æ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–µ —Ä–∞–∑, "
                                   "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –æ–ø—Ü—ñ–π.")
        choose_option(message)



def option(message):
    group = bot.user_actioner.get_group(user_id=str(message.from_user.id))
    if message.text == '1 üí°':
        condition = get_condition(int(group))
        if condition == '–Ñ –ï–Ω–µ—Ä–≥—ñ—è':
            img = open(Dicts.PICTURE_2, 'rb')
            bot.send_photo(message.chat.id, img, caption=f'–ó–≥—ñ–¥–Ω–æ –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ –õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ —É –≤–∞—à–æ–º—É –±—É–¥–∏–Ω–∫—É'
                                                         f' –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç —ñ–º–æ–≤—ñ—Ä–Ω–æ:\n'
                                                         f'<b>‚úÖ {condition} ‚úÖ</b>',
                           parse_mode='HTML')
        elif condition == '–ù–µ–º–∞—î –ï–Ω–µ—Ä–≥—ñ—ó':
            img = open(Dicts.PICTURE_3, 'rb')
            bot.send_photo(message.chat.id, img, caption=f'–ó–≥—ñ–¥–Ω–æ –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ –õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ —É –≤–∞—à–æ–º—É –±—É–¥–∏–Ω–∫—É'
                                                         f' –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç —ñ–º–æ–≤—ñ—Ä–Ω–æ:\n'
                                                         f'<b>‚ùå {condition} ‚ùå</b>',
                           parse_mode='HTML')
        else:
            img = open(Dicts.PICTURE_4, 'rb')
            bot.send_photo(message.chat.id, img,
                           caption=f'–ó–≥—ñ–¥–Ω–æ –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ –õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ —É –≤–∞—à–æ–º—É –±—É–¥–∏–Ω–∫—É'
                                   f' –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç —ñ–º–æ–≤—ñ—Ä–Ω–æ:\n'
                                   f'<b>‚ö†Ô∏è {condition} ‚ö†Ô∏è</b>',
                           parse_mode='HTML')
        choose_option(message)
    elif message.text == '2 üïØ':
        bot.send_message(message.chat.id, text=f'<b>{Dicts.WEEK_DAY[choose_day()]}, –ì—Ä—É–ø–∞ ‚Ññ{group}</b>',
                         parse_mode='HTML')
        condition = get_day_s—Åhedule(int(group))
        for k, v in condition.items():
            bot.send_message(message.chat.id, text=f'<b>{k} : {v}</b>', parse_mode='HTML')
        choose_option(message)
    elif message.text == '3 üìÖ':
        if group == 1:
            img = open(Dicts.SCHEDULE_1, 'rb')
            bot.send_photo(message.chat.id, img)
        elif group == 2:
            img = open(Dicts.SCHEDULE_2, 'rb')
            bot.send_photo(message.chat.id, img)
        else:
            img = open(Dicts.SCHEDULE_3, 'rb')
            bot.send_photo(message.chat.id, img)
        choose_option(message)
    elif message.text == '4 ‚è∞':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton(text='–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è')
        btn2 = types.KeyboardButton(text='–í—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è')
        kb.add(btn1, btn2)
        msg = bot.send_message(message.chat.id, text='<b>–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:</b>', reply_markup=kb, parse_mode='HTML')
        bot.register_next_step_handler(msg, on_off)

    elif message.text == '5 üîÅ':
        choose_group(message)

    else:
        bot.reply_to(message, text="–î–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ <b>–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —É –Ω–∏–∂–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –µ–∫—Ä–∞–Ω—É!</b> "
                                               "–í–¥–∞–ª–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è.", parse_mode='HTML')
        choose_option(message)




def create_err_message(err: Exception) -> str:
    return f"{datetime.now} ::: {err.__class__} ::: {err}"



if __name__ == "__main__":
    while True:
        try:
            bot.setup_resources()
            bot.polling()
        except Exception as err:
            error_message = create_err_message(err)
            bot.telegram_client.post(method='sendMessage', params={"text": error_message,
                                                                   "chat_id": ADMIN_CHAT_ID})

            send_log(error_message)
            bot.shutdown()



