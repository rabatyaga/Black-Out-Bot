import json
from datetime import datetime
import telebot
from telebot import types
from Data import Dicts
import requests
from envparse import Env
from telegram_client import TelegramClient

"""–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è"""
env = Env()
TOKEN = env.str("TOKEN")
ADMIN_CHAT_ID = env.int("ADMIN_CHAT_ID")


class MyBot(telebot.TeleBot):
    def __init__(self, telegram_client: TelegramClient, *args, **kwargs):
        super(self.__class__, self).__init__(*args, **kwargs)
        self.telegram_client = telegram_client



telegram_client = TelegramClient(token=TOKEN, base_url="https://api.telegram.org")
bot = MyBot(token=TOKEN, telegram_client=telegram_client)


class Electricity:
    current_time = datetime.now().strftime("%H")
    current_day = datetime.today().weekday()

    GROUP_1 = Dicts.GROUP_1
    GROUP_2 = Dicts.GROUP_2
    GROUP_3 = Dicts.GROUP_3

    def __init__(self, group, time=current_time):
        self.group = group
        self.time = time

    def get_time_zone(self):
        if int(self.time) >= 21:
            return '21-1'
        else:
            ranges = map(lambda x: x.split('-'), Dicts.TYPE_1.keys())
            return '-'.join(list(filter(lambda x: int(self.current_time) in range(int(x[0]), int(x[1])), ranges))[0])

    def inform(self):
        pass

    def get_condition(self, day=current_day):
        self.day = day
        if self.group == 1:
            return self.GROUP_1[Dicts.WEEK_DAY[self.day]][self.get_time_zone()]
        elif self.group == 2:
            return self.GROUP_2[Dicts.WEEK_DAY[self.day]][self.get_time_zone()]
        else:
            return self.GROUP_3[Dicts.WEEK_DAY[self.day]][self.get_time_zone()]

    def get_day_s—Åhedule(self, day=current_day):
        self.day = day
        if self.group == 1:
            return self.GROUP_1[Dicts.WEEK_DAY[self.day]]
        elif self.group == 2:
            return self.GROUP_2[Dicts.WEEK_DAY[self.day]]
        else:
            return self.GROUP_3[Dicts.WEEK_DAY[self.day]]






@bot.message_handler(commands=['start'])
def start_message(message):
    img = open(Dicts.PICTURE_1, 'rb')
    bot.send_photo(message.chat.id, img, caption="–ü—Ä–∏–≤—ñ—Ç!\n–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥—Ä–∞—Ñ—ñ–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞"
                                                 " —É –º—ñ—Å—Ç—ñ –õ—å–≤—ñ–≤. "
                                    "–¢–∞–∫–æ–∂ —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ "
                                                 "–ø–µ–≤–Ω–æ—ó –≥—Ä—É–ø–∏.\n"
                                    "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>/putin_huilo</b>", parse_mode='HTML')




@bot.message_handler(commands=['putin_huilo'])
def choose_group(message):
    markup_inline = types.InlineKeyboardMarkup()
    group_1 = types.InlineKeyboardButton(text='I –≥—Ä—É–ø–∞', callback_data=1)
    group_2 = types.InlineKeyboardButton(text='II –≥—Ä—É–ø–∞', callback_data=2)
    group_3 = types.InlineKeyboardButton(text='III –≥—Ä—É–ø–∞', callback_data=3)
    markup_inline.add(group_1, group_2, group_3)
    bot.send_message(message.chat.id, '<b>–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –≥—Ä—É–ø–∏:</b>', reply_markup=markup_inline, parse_mode='HTML')
    markup_inline_2 = types.InlineKeyboardMarkup()
    url = types.InlineKeyboardButton(text='–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≥—Ä—É–ø—É', url='https://poweroff.loe.lviv.ua/gav_city3')
    markup_inline_2.add(url)
    bot.send_message(message.chat.id, '<b>–ù–µ –∑–Ω–∞—î—Ç–µ –≤ —è–∫—ñ–π –≤–∏ –≥—Ä—É–ø—ñ?</b>', reply_markup=markup_inline_2,
                     parse_mode='HTML')


@bot.callback_query_handler(func=lambda callback: callback.data)
def to_json(callback):
    with open('user_data.json', 'r', encoding='utf-8') as f_o:
        data_from_json = json.load(f_o)
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    group_id = callback.data
    if str(user_id) not in data_from_json:
        data_from_json[user_id] = {'group': group_id, 'username': user_name}
    else:
        del data_from_json[str(user_id)]
        data_from_json[user_id] = {'group': group_id}
    with open('user_data.json', 'w', encoding='utf-8') as f_o:
        json.dump(data_from_json, f_o, indent=4, ensure_ascii=False)
    bot.send_message(callback.message.chat.id, text=f'–í—ñ—Ç–∞—é, {user_name}. –í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.\n'
                                                    f'–í–∞—à–∞ –≥—Ä—É–ø–∞: ‚Ññ{group_id}')
    choose_option(callback.message)


def choose_option(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    btn1 = types.KeyboardButton(text='1 üí°')
    btn2 = types.KeyboardButton(text='2 üïØ')
    btn3 = types.KeyboardButton(text='3 üìÖ')
    btn4 = types.KeyboardButton(text='4 ‚è∞')
    btn5 = types.KeyboardButton(text='5 üîÅ')
    kb.add(btn1, btn2, btn3, btn4, btn5)
    msg = bot.send_message(message.chat.id, text='<b>–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:</b>', reply_markup=kb, parse_mode='HTML')

    bot.send_message(message.chat.id, text='1. –î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É —Ü—é –º–∏—Ç—å.\n'
                                           '2. –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å.\n'
                                           '3. –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n'
                                           '4. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–æ–¥–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.\n'
                                           '5. –ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É.')
    bot.register_next_step_handler(msg, option)


def option(message):
    with open('user_data.json', 'r', encoding='utf-8') as f_o:
        data_from_json = json.load(f_o)
        group = data_from_json[str(message.chat.id)]['group']
    if message.text == '1 üí°':
        condition = Electricity(int(group)).get_condition()
        if condition == '–Ñ –ï–Ω–µ—Ä–≥—ñ—è':
            img = open(Dicts.PICTURE_2, 'rb')
            bot.send_photo(message.chat.id, img, caption=f'–ó–≥—ñ–¥–Ω–æ –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ –õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ —É –≤–∞—à–æ–º—É –±—É–¥–∏–Ω–∫—É'
                                                         f' –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç —ñ–º–æ–≤—ñ—Ä–Ω–æ:\n'
                                                         f'<b>‚úÖ {condition} ‚úÖ</b>',
                           parse_mode='HTML')
        elif condition == '–ù–µ–º–∞—î –ï–Ω–µ—Ä–≥—ñ—ó':
            img = open(Dicts.PICTURE_3, 'rb')
            bot.send_photo(message.chat.id, img, caption=f'–ó–≥—ñ–¥–Ω–æ –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ –õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ —É –≤–∞—à–æ–º—É –±—É–¥–∏–Ω–∫—É'
                                                         f' –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç —ñ–º–æ–≤—ñ—Ä–Ω–æ:\n'
                                                         f'<b>‚ùå {condition} ‚ùå</b>',
                           parse_mode='HTML')
        else:
            img = open(Dicts.PICTURE_4, 'rb')
            bot.send_photo(message.chat.id, img,
                           caption=f'–ó–≥—ñ–¥–Ω–æ –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –≤—ñ–¥ –õ—å–≤—ñ–≤–æ–±–ª–µ–Ω–µ—Ä–≥–æ —É –≤–∞—à–æ–º—É –±—É–¥–∏–Ω–∫—É'
                                   f' –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç —ñ–º–æ–≤—ñ—Ä–Ω–æ:\n'
                                   f'<b>‚ö†Ô∏è {condition} ‚ö†Ô∏è</b>',
                           parse_mode='HTML')
        choose_option(message)
    elif message.text == '2 üïØ':
        bot.send_message(message.chat.id, text=f'<b>{Dicts.WEEK_DAY[Electricity.current_day]}, –ì—Ä—É–ø–∞ ‚Ññ{group}</b>',
                         parse_mode='HTML')
        condition = Electricity(int(group)).get_day_s—Åhedule()
        for k, v in condition.items():
            bot.send_message(message.chat.id, text=f'<b>{k} : {v}</b>', parse_mode='HTML')
        choose_option(message)
    elif message.text == '3 üìÖ':
        if group == '1':
            img = open(Dicts.SCHEDULE_1, 'rb')
            bot.send_photo(message.chat.id, img)
        elif group == '2':
            img = open(Dicts.SCHEDULE_2, 'rb')
            bot.send_photo(message.chat.id, img)
        else:
            img = open(Dicts.SCHEDULE_3, 'rb')
            bot.send_photo(message.chat.id, img)
        choose_option(message)
    # elif message.text == '4 ‚è∞':
    #     while True:
    #         time.sleep(60)
    #         if Electricity.current_time == '12:00':  # –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤–∞—à–µ –≤—Ä–µ–º—è
    #             print('pass')
    #             bot.send_message("—Ç—É—Ç –∞–π–¥–∏ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", 'text')

    elif message.text == '5 üîÅ':
        choose_group(message)




def create_err_message(err: Exception) -> str:
    return f"{datetime.now} ::: {err.__class__} ::: {err}"



while True:
    try:
        bot.polling()
    except Exception as err:
        bot.telegram_client.post(method='sendMessage', params={"text": create_err_message(err),
                                                               "chat_id": ADMIN_CHAT_ID})



